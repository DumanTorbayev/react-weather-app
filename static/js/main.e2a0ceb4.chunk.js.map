{"version":3,"sources":["components/Preloader/Preloader.module.scss","components/Search.jsx","components/Header.jsx","components/Result.jsx","components/NotFound.jsx","components/Weather.jsx","components/ForecastHour.jsx","components/Preloader/Preloader.jsx","reducers/wheatherReducer.js","actions/weatherActions.js","current-date.js","api/api.js","App.js","index.js"],"names":["module","exports","Search","onSearch","isLoaded","useState","value","setValue","handleValueChanges","e","target","callOnSearch","preventDefault","Transition","in","timeout","state","className","onChange","type","placeholder","onClick","memo","children","Result","weather","forecast","innerWidth","window","style","maxWidth","height","marginTop","marginBottom","renderThumbHorizontal","props","backgroundColor","borderRadius","map","item","key","dt","temp","Math","floor","main","icon","month","dt_txt","slice","day","hour","NotFound","faFrown","Weather","city","country","date","description","highestTemp","lowestTemp","wind","humidity","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","ForecastHour","iconUrl","src","alt","Preloader","css","loader","initialState","weatherData","isFetching","error","action","payload","setIsFetching","setError","currentDate","Date","getDay","getDate","getMonth","APIkey","process","App","useReducer","dispatch","searchValue","weatherApi","forecastApi","axios","all","get","getData","then","spread","weatherInfo","data","name","sys","temp_max","temp_min","clouds","speed","setForecast","list","catch","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2a0ceb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__3nJnp\",\"load8\":\"Preloader_load8__xdygT\"};","import React, {useState} from 'react';\r\nimport {Transition} from \"react-transition-group\";\r\n\r\nconst Search = ({onSearch, isLoaded}) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const handleValueChanges = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const callOnSearch = (e) => {\r\n        e.preventDefault();\r\n        onSearch(value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Transition\r\n                in={isLoaded}\r\n                timeout={1000}\r\n            >\r\n                {state => (\r\n                    <div className={`search-wrap ${state}`}>\r\n                        <input onChange={handleValueChanges} value={value} type=\"text\" placeholder='Enter city'/>\r\n                        <button onClick={callOnSearch}>Find</button>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Search;","import React, {memo} from 'react';\r\nimport {Transition} from \"react-transition-group\";\r\n\r\nconst Header = ({children, isLoaded}) => {\r\n\r\n    return (\r\n        <Transition\r\n            in={isLoaded}\r\n            timeout={1000}\r\n        >\r\n            {state => (\r\n                <h2 className={`header-title ${state}`}>\r\n                    {children}\r\n                </h2>\r\n            )}\r\n        </Transition>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default memo(Header);","import React from 'react';\r\nimport {Weather, ForecastHour} from \"./index\";\r\nimport Scrollbars from \"react-custom-scrollbars-2\";\r\n\r\nconst Result = ({weather, forecast}) => {\r\n    const {innerWidth} = window\r\n\r\n    return (\r\n        <>\r\n            <Weather weather={weather}/>\r\n            <div className='forecast-container'>\r\n                <h2 className='forecast-title'>Forecast</h2>\r\n                <Scrollbars\r\n                    style={{\r\n                        maxWidth: '100%',\r\n                        height: `${innerWidth < 768 ? '145px' : '185px'}`,\r\n                        marginTop: '1rem',\r\n                        marginBottom: '1rem'\r\n                    }}\r\n                    renderThumbHorizontal={({ style, ...props }) =>\r\n                        <div {...props} style={{ ...style, backgroundColor: '#fff', borderRadius: '3px' }}/>\r\n                    }\r\n                >\r\n                    <div className='forecast-wrap'>\r\n                        {\r\n                            forecast.map(item => (\r\n                                <ForecastHour\r\n                                    key={item.dt}\r\n                                    temp={Math.floor(item.main.temp)}\r\n                                    icon={item.weather[0].icon}\r\n                                    month={item.dt_txt.slice(5, 7)}\r\n                                    day={item.dt_txt.slice(8, 10)}\r\n                                    hour={item.dt_txt.slice(11, 13)}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </Scrollbars>\r\n\r\n                {/*<div className='forecast-wrap'>\r\n                    {\r\n                        forecast.map(item => (\r\n                            <ForecastHour\r\n                                key={item.dt}\r\n                                temp={Math.floor(item.main.temp)}\r\n                                icon={item.weather[0].icon}\r\n                                month={item.dt_txt.slice(5, 7)}\r\n                                day={item.dt_txt.slice(8, 10)}\r\n                                hour={item.dt_txt.slice(11, 13)}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>*/}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Result;","import React from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faFrown} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Transition} from \"react-transition-group\";\r\n\r\nconst NotFound = ({isLoaded}) => {\r\n    return (\r\n        <>\r\n            <Transition\r\n                in={isLoaded}\r\n                timeout={1000}\r\n            >\r\n                {state => (\r\n                    <div className={`not-found-wrapper ${state}`}>\r\n                        <div className='not-found-container'>\r\n                            <FontAwesomeIcon icon={faFrown} />\r\n                            <div>Sorry, the specified city was not found..</div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Transition>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faCloud,\r\n    faBolt,\r\n    faCloudRain,\r\n    faCloudShowersHeavy,\r\n    faSnowflake,\r\n    faSun,\r\n    faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Weather = ({weather}) => {\r\n    const {city, country, date, main, temp, description, highestTemp, lowestTemp, wind, humidity} = weather;\r\n\r\n    let weatherIcon = null;\r\n\r\n    if (main === 'Thunderstorm') {\r\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n    } else if (main === 'Drizzle') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n    } else if (main === 'Rain') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n    } else if (main === 'Snow') {\r\n        weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n    } else if (main === 'Clear') {\r\n        weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n    } else if (main === 'Clouds') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n    } else {\r\n        weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n    }\r\n\r\n    return (\r\n        <div className='current-weather-wrap'>\r\n            <div className='current-weather'>\r\n                <div className='location'>{city}, {country}</div>\r\n                <div className='current-day'>{date}</div>\r\n            </div>\r\n\r\n            <div className='weather-container'>\r\n                <div className='current-weather-info'>\r\n                    <div className='weather-icon'>{weatherIcon}</div>\r\n                    <div>\r\n                        <div className='temp'>{Math.floor(temp)}&#176;</div>\r\n                        <div className='description'>{description}</div>\r\n                    </div>\r\n                </div>\r\n                <div className='weather-details'>\r\n                    <div className='weather-details--items'>\r\n                        <span>{Math.floor(highestTemp)}&#176;</span>\r\n                        <span>High</span>\r\n                    </div>\r\n                    <div className='weather-details--items'>\r\n                        <span>{Math.floor(lowestTemp)}&#176;</span>\r\n                        <span>Low</span>\r\n                    </div>\r\n                    <div className='weather-details--items'>\r\n                        <span>{wind} km/h</span>\r\n                        <span>Wind</span>\r\n                    </div>\r\n                    <div className='weather-details--items'>\r\n                        <span>{humidity} %</span>\r\n                        <span>Humidity</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nWeather.propTypes = {\r\n    weather: PropTypes.shape({\r\n        city: PropTypes.string,\r\n        country: PropTypes.string,\r\n        date: PropTypes.string,\r\n        main: PropTypes.string,\r\n        temp: PropTypes.number,\r\n        description: PropTypes.string,\r\n        highestTemp: PropTypes.number,\r\n        lowestTemp: PropTypes.number,\r\n        wind: PropTypes.number,\r\n        humidity: PropTypes.number,\r\n    }).isRequired\r\n\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ForecastHour = ({temp, icon, month, day, hour}) => {\r\n    const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n\r\n    return (\r\n        <div className='forecast'>\r\n            <div>{month}.{day}</div>\r\n            <div>{hour}:00</div>\r\n            <div>\r\n                <img src={iconUrl} alt=\"\"/>\r\n            </div>\r\n            <div>{temp}&#176;</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nForecastHour.propTypes = {\r\n    temp: PropTypes.number.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n    month: PropTypes.string.isRequired,\r\n    day: PropTypes.string.isRequired,\r\n    hour: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ForecastHour;","import React from 'react';\r\nimport css from './Preloader.module.scss';\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <>\r\n            <div className={css.loader}>Loading</div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Preloader;","export const initialState = {\r\n    weatherData: {},\r\n    forecast: [],\r\n    isLoaded: false,\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const weather = (state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_WEATHER':\r\n            return {\r\n                ...state,\r\n                weatherData: action.payload,\r\n                isLoaded: true,\r\n            }\r\n        case 'SET_FORECAST':\r\n            return {\r\n                ...state,\r\n                forecast: action.payload,\r\n                isLoaded: true,\r\n            }\r\n        case 'SET_IS_FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.payload,\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isLoaded: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","export const setWeather = (data) => ({type: 'SET_WEATHER', payload: data});\r\nexport const setForecast = (data) => ({type: 'SET_FORECAST', payload: data});\r\nexport const setIsFetching = (value) => ({type: 'SET_IS_FETCHING', payload: value});\r\nexport const setError = (value) => ({type: 'SET_ERROR', payload: value});","const months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst currentDate = new Date();\r\n\r\nexport const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\r\n    months[currentDate.getMonth()]\r\n}`;","import axios from \"axios\";\r\n\r\nconst APIkey = process.env.REACT_APP_API_KEY\r\n\r\nexport const getData = (searchValue) => {\r\n    const weatherApi = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&APPID=${APIkey}&units=metric`;\r\n    const forecastApi = `https://api.openweathermap.org/data/2.5/forecast?q=${searchValue}&APPID=${APIkey}&units=metric`;\r\n\r\n    return axios.all([axios.get(weatherApi), axios.get(forecastApi)]);\r\n}\r\n","import React, {useReducer} from 'react';\nimport {Header, Search, Result, NotFound, Preloader} from \"./components\";\nimport {weather, initialState} from \"./reducers/wheatherReducer\";\nimport {setError, setForecast, setIsFetching, setWeather} from \"./actions/weatherActions\";\nimport axios from \"axios\";\nimport {date} from \"./current-date\";\nimport {getData} from \"./api/api\";\nimport {Transition} from \"react-transition-group\";\n\nconst App = () => {\n    const [state, dispatch] = useReducer(weather, initialState);\n\n    const onSearch = (searchValue) => {\n        dispatch(setIsFetching(true))\n        getData(searchValue)\n            .then(axios.spread((weather, forecast) => {\n                const weatherInfo = {\n                    city: weather.data.name,\n                    country: weather.data.sys.country,\n                    description: weather.data.weather[0].description,\n                    main: weather.data.weather[0].main,\n                    temp: weather.data.main.temp,\n                    highestTemp: weather.data.main.temp_max,\n                    lowestTemp: weather.data.main.temp_min,\n                    clouds: weather.data.clouds.all,\n                    humidity: weather.data.main.humidity,\n                    wind: weather.data.wind.speed,\n                    date\n                };\n\n                dispatch(setWeather(weatherInfo));\n                dispatch(setForecast(forecast.data.list));\n                dispatch(setError(false));\n                dispatch(setIsFetching(false));\n            }))\n            .catch(error => {\n                console.log(error);\n                dispatch(setError(true));\n                dispatch(setIsFetching(false));\n            })\n    }\n\n    const {isLoaded, isFetching, error, weatherData, forecast} = state;\n\n    return (\n        <div className=\"container\">\n            <Header isLoaded={isLoaded}>wheather app</Header>\n            <div className='content'>\n                <Transition in={isLoaded} timeout={1000}>\n                    {state => <h1 className={`body-title ${state}`}>wheather app</h1>}\n                </Transition>\n                <Search onSearch={onSearch} isLoaded={isLoaded}/>\n                {!error\n                    ? <>\n                        <Transition in={isLoaded} timeout={1000}>\n                            {state => (\n                                <div className={`result-wrap ${state}`}>\n                                    {isFetching\n                                        ? <Preloader/>\n                                        : <Result weather={weatherData} forecast={forecast}/>\n                                    }\n                                </div>\n                            )}\n                        </Transition>\n                    </>\n                    : <NotFound isLoaded={isLoaded}/>\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/style.scss';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}